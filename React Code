import React, { useMemo, useRef, useState, useEffect } from "react";

// Expense Splitter + Tracker (Client)
// Updated: Added percentage splits (per-item custom shares), discounts, and
// simple memory for frequent buyers using localStorage.
// Server endpoints expected:
//    POST /api/ocr    (multipart/form-data: file) -> { text }
//    POST /api/parse  (json: { rawText }) -> { items: [{ item, qty, price }], subtotal, tax, tip }
// TailwindCSS assumed.

// ---------- Small Utils ----------
const currency = (n) => `$${(Number(n || 0)).toFixed(2)}`;
const safeNum = (n, d = 0) => {
  const v = Number(n);
  return Number.isFinite(v) ? v : d;
};
const clampNonNeg = (n) => Math.max(0, safeNum(n, 0));

function downloadCSV(filename, rows) {
  const processRow = (row) =>
    row
      .map((val) => {
        if (val == null) return "";
        const str = String(val).replaceAll('"', '""');
        return `"${str}"`;
      })
      .join(",");
  const csvContent = [
    ["person", "item", "qty", "price", "share", "total"],
    ...rows.map(processRow),
  ].join("
");
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

// ---------- Local Memory for Frequent Buyers ----------
// Structure: { keyword -> [person, ...] }
const MEM_KEY = "split_prefs_v1";
const loadPrefs = () => {
  try { return JSON.parse(localStorage.getItem(MEM_KEY) || "{}"); } catch { return {}; }
};
const savePrefs = (obj) => localStorage.setItem(MEM_KEY, JSON.stringify(obj));
const normalize = (s) => (s || "").toLowerCase().replace(/[^a-z0-9 ]/g, "").trim();

// ---------- Main App ----------
export default function App() {
  const [people, setPeople] = useState(["Ben", "Heidi"]);
  const [newPerson, setNewPerson] = useState("");

  const [rawText, setRawText] = useState("");
  const [items, setItems] = useState([]); // [{ item, qty, price, discAmt, discPct, splitMode }]
  const [subtotal, setSubtotal] = useState(null);
  const [tax, setTax] = useState(null);
  const [tip, setTip] = useState(null);

  // assignments: { index: Set(personName) }
  const [assignments, setAssignments] = useState({});
  // custom shares: { index: { person: weightNumber } } (weights sum normalized per item)
  const [shares, setShares] = useState({});

  const [busy, setBusy] = useState(false);
  const [stage, setStage] = useState("upload"); // upload -> review -> split -> done
  const fileInputRef = useRef(null);

  const [prefs, setPrefs] = useState({});
  useEffect(() => setPrefs(loadPrefs()), []);

  // Add/Remove a person from an item's assignment
  const toggleAssignment = (idx, person) => {
    setAssignments((prev) => {
      const cur = new Set(prev[idx] || []);
      if (cur.has(person)) cur.delete(person);
      else cur.add(person);
      return { ...prev, [idx]: cur };
    });
  };

  const setSplitMode = (idx, mode) => {
    setItems((prev) => {
      const next = [...prev];
      next[idx] = { ...next[idx], splitMode: mode };
      return next;
    });
  };

  const setShareWeight = (idx, person, weight) => {
    setShares((prev) => ({
      ...prev,
      [idx]: { ...(prev[idx] || {}), [person]: clampNonNeg(weight) }
    }));
  };

  const clearAllAssignments = () => { setAssignments({}); setShares({}); };

  const handleAddPerson = () => {
    const name = newPerson.trim();
    if (!name) return;
    if (people.includes(name)) return;
    setPeople((p) => [...p, name]);
    setNewPerson("");
  };

  const removePerson = (name) => {
    setPeople((p) => p.filter((x) => x !== name));
    // Remove from all assignments & shares
    setAssignments((prev) => {
      const next = {};
      for (const [k, setVal] of Object.entries(prev)) {
        const s = new Set(setVal);
        s.delete(name);
        next[k] = s;
      }
      return next;
    });
    setShares((prev) => {
      const next = {};
      for (const [k, obj] of Object.entries(prev)) {
        const copy = { ...obj };
        delete copy[name];
        next[k] = copy;
      }
      return next;
    });
  };

  // Upload -> OCR
  const handleFile = async (file) => {
    setBusy(true);
    try {
      const form = new FormData();
      form.append("file", file);
      const resp = await fetch("/api/ocr", { method: "POST", body: form });
      if (!resp.ok) throw new Error(`OCR failed: ${resp.status}`);
      const data = await resp.json();
      setRawText(data.text || "");
      setStage("review");
    } catch (e) {
      alert("OCR error: " + e.message);
    } finally {
      setBusy(false);
    }
  };

  const onUploadClick = () => fileInputRef.current?.click();

  // Parse with ChatGPT
  const handleParse = async () => {
    if (!rawText.trim()) return alert("No OCR text to parse.");
    setBusy(true);
    try {
      const resp = await fetch("/api/parse", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ rawText }),
      });
      if (!resp.ok) throw new Error(`Parse failed: ${resp.status}`);
      const data = await resp.json();
      const base = (Array.isArray(data.items) ? data.items : []).map((r) => ({
        item: r.item || "",
        qty: r.qty ?? 1,
        price: r.price ?? 0,
        discAmt: 0,
        discPct: 0,
        splitMode: "even",
      }));
      setItems(base);
      setSubtotal(data.subtotal ?? null);
      setTax(data.tax ?? null);
      setTip(data.tip ?? null);

      // Try smart auto-assign from local prefs
      setTimeout(applySmartAssign, 0);
      setStage("split");
    } catch (e) {
      alert("Parse error: " + e.message);
    } finally {
      setBusy(false);
    }
  };

  // Manual edits to parsed items
  const updateItem = (idx, patch) => {
    setItems((prev) => {
      const next = [...prev];
      next[idx] = { ...next[idx], ...patch };
      return next;
    });
  };

  const addItem = () => setItems((prev) => [...prev, { item: "", qty: 1, price: 0, discAmt: 0, discPct: 0, splitMode: "even" }]);
  const removeItem = (idx) => {
    setItems((prev) => prev.filter((_, i) => i !== idx));
    setAssignments((prev) => {
      const copy = { ...prev };
      delete copy[idx];
      return copy;
    });
    setShares((prev) => {
      const copy = { ...prev };
      delete copy[idx];
      return copy;
    });
  };

  // Smart assign based on local prefs
  const applySmartAssign = () => {
    const p = loadPrefs();
    const nextAssign = { ...assignments };
    items.forEach((row, idx) => {
      const key = normalize(row.item);
      if (!key) return;
      const hits = p[key];
      if (Array.isArray(hits) && hits.length) {
        nextAssign[idx] = new Set(hits.filter((h) => people.includes(h)));
      }
    });
    setAssignments(nextAssign);
  };

  const rememberAssignments = () => {
    const p = { ...prefs };
    items.forEach((row, idx) => {
      const key = normalize(row.item);
      if (!key) return;
      const assigned = Array.from(assignments[idx] || []);
      if (assigned.length) p[key] = assigned;
    });
    savePrefs(p);
    setPrefs(p);
    alert("Saved preferences for frequent items.");
  };

  // Effective line total after discount
  const lineTotalAfterDiscount = (row) => {
    const qty = Math.max(1, safeNum(row.qty, 1));
    const price = clampNonNeg(row.price);
    const base = qty * price;
    const dAmt = clampNonNeg(row.discAmt);
    const dPct = clampNonNeg(row.discPct);
    const total = Math.max(0, base - dAmt - base * (dPct / 100));
    return total;
  };

  // Totals per person
  const perPersonTotals = useMemo(() => {
    // 1) Compute each person's subtotal based on assigned shares
    const personSub = Object.fromEntries(people.map((p) => [p, 0]));

    items.forEach((row, idx) => {
      const assigned = Array.from(assignments[idx] || []);
      if (assigned.length === 0) return; // unassigned lines are ignored

      const total = lineTotalAfterDiscount(row);

      // Decide split method
      const mode = row.splitMode || "even";
      if (mode === "custom") {
        const w = shares[idx] || {};
        const sumW = assigned.reduce((s, p) => s + clampNonNeg(w[p]), 0);
        if (sumW > 0) {
          assigned.forEach((p) => {
            const frac = clampNonNeg(w[p]) / sumW;
            personSub[p] = safeNum(personSub[p]) + total * frac;
          });
          return;
        }
        // fall through to even if weights invalid
      }
      // Even split
      const each = total / assigned.length;
      assigned.forEach((p) => (personSub[p] = safeNum(personSub[p]) + each));
    });

    const overallSub = Object.values(personSub).reduce((a, b) => a + b, 0);

    // 2) Distribute tax/tip by subtotal share
    const taxVal = clampNonNeg(tax);
    const tipVal = clampNonNeg(tip);

    const person = {};
    for (const p of people) {
      const sub = clampNonNeg(personSub[p]);
      const frac = overallSub > 0 ? sub / overallSub : 0;
      const taxShare = frac * taxVal;
      const tipShare = frac * tipVal;
      const total = sub + taxShare + tipShare;
      person[p] = { subtotal: sub, tax: taxShare, tip: tipShare, total };
    }

    return { person, overallSub, tax: taxVal, tip: tipVal };
  }, [people, items, assignments, shares, tax, tip]);

  const [note, setNote] = useState("Receipt split");
  const [venmoHandles, setVenmoHandles] = useState({}); // { name: handle }

  const venmoLink = (username, amount, note) =>
    `https://venmo.com/?txn=pay&recipients=${encodeURIComponent(
      username
    )}&amount=${safeNum(amount).toFixed(2)}&note=${encodeURIComponent(note)}`;

  const exportCSV = () => {
    const rows = [];
    items.forEach((row, idx) => {
      const total = lineTotalAfterDiscount(row);
      const assigned = Array.from(assignments[idx] || []);

      if (assigned.length === 0) return;

      const mode = row.splitMode || "even";
      if (mode === "custom") {
        const w = shares[idx] || {};
        const sumW = assigned.reduce((s, p) => s + clampNonNeg(w[p]), 0);
        if (sumW > 0) {
          assigned.forEach((p) => {
            const frac = clampNonNeg(w[p]) / sumW;
            const share = total * frac;
            rows.push([p, row.item, row.qty, row.price, share, share]);
          });
          return;
        }
      }
      const each = total / assigned.length;
      assigned.forEach((p) => rows.push([p, row.item, row.qty, row.price, each, each]));
    });
    downloadCSV("split.csv", rows);
  };

  const resetAll = () => {
    setRawText("");
    setItems([]);
    setSubtotal(null);
    setTax(null);
    setTip(null);
    setAssignments({});
    setShares({});
    setStage("upload");
  };

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      <header className="p-4 md:p-6 border-b bg-white sticky top-0 z-10">
        <div className="max-w-5xl mx-auto flex items-center justify-between">
          <h1 className="text-2xl font-bold tracking-tight">Expense Splitter</h1>
          <div className="text-sm text-gray-500">Weekend Vibe Build</div>
        </div>
      </header>

      <main className="max-w-5xl mx-auto p-4 md:p-6 space-y-6">
        {/* Stage: Upload */}
        {stage === "upload" && (
          <section className="bg-white rounded-2xl shadow p-6">
            <h2 className="text-xl font-semibold mb-2">1) Upload a receipt</h2>
            <p className="text-sm text-gray-600 mb-4">Photo (JPG/PNG) works best.</p>
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*" // PDFs require GCS batch processing; keep it simple here
              hidden
              onChange={(e) => e.target.files?.[0] && handleFile(e.target.files[0])}
            />
            <button
              onClick={onUploadClick}
              disabled={busy}
              className="px-4 py-2 rounded-xl bg-black text-white hover:opacity-90 disabled:opacity-50"
            >
              {busy ? "Uploading…" : "Choose File"}
            </button>
          </section>
        )}

        {/* Stage: Review OCR */}
        {stage === "review" && (
          <section className="bg-white rounded-2xl shadow p-6 space-y-4">
            <h2 className="text-xl font-semibold">2) Review OCR text</h2>
            <p className="text-sm text-gray-600">Tweak if needed, then parse with AI.</p>
            <textarea
              className="w-full h-56 p-3 border rounded-xl font-mono text-sm"
              value={rawText}
              onChange={(e) => setRawText(e.target.value)}
            />
            <div className="flex gap-3">
              <button
                onClick={() => setStage("upload")}
                className="px-4 py-2 rounded-xl border"
              >
                Back
              </button>
              <button
                onClick={handleParse}
                disabled={busy}
                className="px-4 py-2 rounded-xl bg-black text-white hover:opacity-90 disabled:opacity-50"
              >
                {busy ? "Parsing…" : "Parse with ChatGPT"}
              </button>
            </div>
          </section>
        )}

        {/* Stage: Split */}
        {stage === "split" && (
          <section className="space-y-6">
            <div className="bg-white rounded-2xl shadow p-6">
              <h2 className="text-xl font-semibold mb-3">3) People</h2>
              <div className="flex flex-wrap gap-2 mb-4">
                {people.map((p) => (
                  <span key={p} className="inline-flex items-center gap-2 px-3 py-1.5 rounded-full bg-gray-100">
                    <span className="font-medium">{p}</span>
                    <button className="text-gray-500 hover:text-red-600" onClick={() => removePerson(p)}>×</button>
                  </span>
                ))}
              </div>
              <div className="flex gap-2">
                <input
                  value={newPerson}
                  onChange={(e) => setNewPerson(e.target.value)}
                  placeholder="Add person (name)"
                  className="border rounded-xl px-3 py-2 w-64"
                />
                <button onClick={handleAddPerson} className="px-3 py-2 rounded-xl border">Add</button>
                <button onClick={applySmartAssign} className="px-3 py-2 rounded-xl border ml-auto">Smart Assign</button>
                <button onClick={rememberAssignments} className="px-3 py-2 rounded-xl border">Remember Assignments</button>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow p-6 overflow-x-auto">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-xl font-semibold">4) Items</h2>
                <div className="flex gap-2">
                  <button className="px-3 py-2 rounded-xl border" onClick={addItem}>Add Row</button>
                  <button className="px-3 py-2 rounded-xl border" onClick={clearAllAssignments}>Clear Assignments</button>
                </div>
              </div>
              <table className="w-full text-left text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="py-2 pr-2">Item</th>
                    <th className="py-2 pr-2 w-20">Qty</th>
                    <th className="py-2 pr-2 w-28">Price</th>
                    <th className="py-2 pr-2 w-32">Discount $</th>
                    <th className="py-2 pr-2 w-28">Disc %</th>
                    <th className="py-2 pr-2">Assign</th>
                    <th className="py-2 pr-2 w-40">Split Mode</th>
                    <th className="py-2 pr-2 w-16"></th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((row, idx) => {
                    const assigned = Array.from(assignments[idx] || []);
                    return (
                      <tr key={idx} className="border-b last:border-0 align-top">
                        <td className="py-2 pr-2">
                          <input
                            className="w-full border rounded-lg px-2 py-1"
                            value={row.item || ""}
                            onChange={(e) => updateItem(idx, { item: e.target.value })}
                          />
                          <div className="text-xs text-gray-400 mt-1">Line total: {currency(lineTotalAfterDiscount(row))}</div>
                        </td>
                        <td className="py-2 pr-2">
                          <input
                            type="number"
                            min={1}
                            className="w-20 border rounded-lg px-2 py-1"
                            value={row.qty ?? 1}
                            onChange={(e) => updateItem(idx, { qty: Number(e.target.value) })}
                          />
                        </td>
                        <td className="py-2 pr-2">
                          <input
                            type="number"
                            step="0.01"
                            className="w-28 border rounded-lg px-2 py-1"
                            value={row.price ?? 0}
                            onChange={(e) => updateItem(idx, { price: Number(e.target.value) })}
                          />
                        </td>
                        <td className="py-2 pr-2">
                          <input
                            type="number"
                            step="0.01"
                            className="w-32 border rounded-lg px-2 py-1"
                            value={row.discAmt ?? 0}
                            onChange={(e) => updateItem(idx, { discAmt: Number(e.target.value) })}
                          />
                        </td>
                        <td className="py-2 pr-2">
                          <input
                            type="number"
                            step="0.1"
                            className="w-28 border rounded-lg px-2 py-1"
                            value={row.discPct ?? 0}
                            onChange={(e) => updateItem(idx, { discPct: Number(e.target.value) })}
                          />
                        </td>
                        <td className="py-2 pr-2">
                          <div className="flex flex-wrap gap-2">
                            {people.map((p) => {
                  const t = perPersonTotals.person[p] || { subtotal: 0, tax: 0, tip: 0, total: 0 };
                  return (
                                <button
                                  type="button"
                                  key={p}
                                  onClick={() => toggleAssignment(idx, p)}
                                  className={`px-2.5 py-1.5 rounded-full border ${
                                    selected ? "bg-black text-white" : "bg-white"
                                  }`}
                                >
                                  {p}
                                </button>
                              );
                            })}
                          </div>
                        </td>
                        <td className="py-2 pr-2">
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => setSplitMode(idx, "even")}
                              className={`px-2 py-1 rounded-lg border text-xs ${row.splitMode === "even" ? "bg-gray-900 text-white" : "bg-white"}`}
                            >Even</button>
                            <button
                              onClick={() => setSplitMode(idx, "custom")}
                              className={`px-2 py-1 rounded-lg border text-xs ${row.splitMode === "custom" ? "bg-gray-900 text-white" : "bg-white"}`}
                            >Custom</button>
                          </div>
                          {row.splitMode === "custom" && assigned.length > 0 && (
                            <div className="mt-2 space-y-1">
                              {assigned.map((p) => (
                                <div key={p} className="flex items-center gap-2 text-xs">
                                  <span className="w-20 truncate">{p}</span>
                                  <input
                                    type="number"
                                    min={0}
                                    step={1}
                                    className="w-20 border rounded-lg px-2 py-1"
                                    value={shares[idx]?.[p] ?? 0}
                                    onChange={(e) => setShareWeight(idx, p, Number(e.target.value))}
                                  />
                                  <span>weight</span>
                                </div>
                              ))}
                              <div className="text-[11px] text-gray-500">Weights are relative and normalized per item. (E.g., 70/30)</div>
                            </div>
                          )}
                        </td>
                        <td className="py-2 pr-2 text-right">
                          <button className="text-gray-500 hover:text-red-600" onClick={() => removeItem(idx)}>×</button>
                        </td>
                      </tr>
                    );
                  })}

                  {items.length === 0 && (
                    <tr>
                      <td className="py-6 text-gray-500" colSpan={8}>
                        No items yet. If parsing didn’t return items, add rows manually or go back and re-parse.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            <div className="grid md:grid-cols-3 gap-4">
              <div className="bg-white rounded-2xl shadow p-6">
                <h3 className="font-semibold mb-2">Totals</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between"><span>Items Subtotal</span><span>{currency(perPersonTotals.overallSub)}</span></div>
                  <div className="flex justify-between"><span>Tax</span><span>
                    <input
                      className="w-28 border rounded-lg px-2 py-0.5 text-right"
                      type="number" step="0.01" value={tax ?? 0}
                      onChange={(e) => setTax(Number(e.target.value))}
                    />
                  </span></div>
                  <div className="flex justify-between"><span>Tip</span><span>
                    <input
                      className="w-28 border rounded-lg px-2 py-0.5 text-right"
                      type="number" step="0.01" value={tip ?? 0}
                      onChange={(e) => setTip(Number(e.target.value))}
                    />
                  </span></div>
                </div>
                <div className="mt-3 text-xs text-gray-500">Tax & tip are split proportionally by each person’s item subtotal.</div>
              </div>

              <div className="bg-white rounded-2xl shadow p-6 md:col-span-2">
                <h3 className="font-semibold mb-2">Per-person breakdown</h3>
                <div className="grid sm:grid-cols-2 gap-3">
                  {people.map((p) => {
                    const t = perPersonTotals.person[p] || { subtotal: 0, tax: 0, tip: 0, total: 0 };
                    const [venmoHandles, setVenmoHandles] = useState({}); // shadow fix to avoid hook-in-loop (moved outside)
                    return (
                      <div key={p} className="border rounded-xl p-3">
                        <div className="flex items-center justify-between mb-1">
                          <div className="font-medium">{p}</div>
                          <div className="text-lg font-bold">{currency(t.total)}</div>
                        </div>
                        <div className="text-xs text-gray-600 space-y-0.5">
                          <div className="flex justify-between"><span>Items</span><span>{currency(t.subtotal)}</span></div>
                          <div className="flex justify-between"><span>Tax share</span><span>{currency(t.tax)}</span></div>
                          <div className="flex justify-between"><span>Tip share</span><span>{currency(t.tip)}</span></div>
                        </div>
                        <div className="mt-2 flex items-center gap-2">
                          <input
                            placeholder="Venmo handle (no @)"
                            className="border rounded-lg px-2 py-1 text-sm"
                            value={venmoHandles?.[p] || ""}
                            onChange={(e) => setVenmoHandles((h) => ({ ...h, [p]: e.target.value }))}
                          />
                          <a
                            target="_blank"
                            href={
                              venmoHandles?.[p]
                                ? venmoLink(venmoHandles[p], t.total, note || `Receipt split for ${p}`)
                                : undefined
                            }
                            rel="noreferrer"
                            className={`px-3 py-1.5 rounded-lg text-sm ${
                              venmoHandles?.[p] ? "bg-black text-white" : "bg-gray-200 text-gray-500 cursor-not-allowed"
                            }`}
                          >
                            Pay via Venmo
                          </a>
                        </div>
                      </div>
                    );
                  })}
                </div>
                <div className="mt-3">
                  <label className="text-sm text-gray-600">Payment note</label>
                  <input
                    className="mt-1 w-full border rounded-xl px-3 py-2"
                    placeholder="e.g., Target run: snacks + blanket"
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                  />
                </div>
              </div>
            </div>

            <div className="flex flex-wrap gap-3">
              <button className="px-4 py-2 rounded-xl border" onClick={() => setStage("review")}>Back</button>
              <button className="px-4 py-2 rounded-xl border" onClick={exportCSV}>Export CSV</button>
              <button className="px-4 py-2 rounded-xl bg-gray-900 text-white" onClick={() => setStage("done")}>Mark Complete</button>
            </div>
          </section>
        )}

        {/* Stage: Done */}
        {stage === "done" && (
          <section className="bg-white rounded-2xl shadow p-6 text-center space-y-3">
            <div className="text-2xl">✅ Split Complete</div>
            <p className="text-gray-600">Share the Venmo links or export the CSV for your records.</p>
            <div className="flex gap-3 justify-center">
              <button className="px-4 py-2 rounded-xl border" onClick={() => setStage("split")}>Back</button>
              <button className="px-4 py-2 rounded-xl bg-black text-white" onClick={resetAll}>Start New Split</button>
            </div>
          </section>
        )}
      </main>

      <footer className="max-w-5xl mx-auto p-6 text-center text-xs text-gray-500">
        Built fast with Google Vision + Venmo + ChatGPT. Be kind to your receipts.
      </footer>
    </div>
  );
}
